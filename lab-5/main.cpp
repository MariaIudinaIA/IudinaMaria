#include <iostream> 
#include "graph.h"

int main() { 
    Graph graph; // Создание 

    for (int i = 1; i <= 4; ++i) { // Цикл с 4 узлами
        graph.addNode(i); // узел итый
    }

    graph.addEdge(1, 2); // Создание ребер между узлами
    graph.addEdge(1, 3); // Создание ребер между узлами
    graph.addEdge(1, 4); // Создание ребер между узлами
    graph.addEdge(2, 3); // Создание ребер между узлами
    graph.addEdge(3, 4); // Создание ребер между узлами
    graph.addEdge(4, 1); // Создание ребер между узлами

    // Вычисление суммы значений
    int sum = graph.sumOfNeighbors(1); // Вызов метода вычисления суммы
    std::cout << "Sum of values of neighboring nodes for Node1: " << sum << std::endl; // результат
}

// Граф - это динамическая структура, тут уже немножечко посложнее, эти графы, которые состоят из вершин и рёбер, то есть из элементов узлов и связи между ними, 
// можно реализовать по-разному, было предоставлено преподавателем разный выбор, что можно использовать для реализации.
// Суть в том, что, когда  реализуешь через односвязные или двусвязный список, граф обычно в списке содержится просто перечисление всех вершин графа и, 
// то есть элементы данного списка представляют собой вершины графа и у этих вершин графа и имеется список связанных с ними, 
// то есть куда идут рёбра из данной вершины.Это можно туда либо список запихнуть либо массив либо вектор либо что угодно.